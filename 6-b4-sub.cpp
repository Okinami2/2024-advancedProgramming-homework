

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        return 0;
    const char* p = str;
    while (*p)
        ++p;
    return p - str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strcat(char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {

    }
    else{
        char* p = s1;
        while (*p)
            ++p;
        while ((*p++ = *s2++))
            ;
    }
    
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strncat(char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {

    }
    else {
        char* p = s1;
        while (*p)
            ++p;
        int i = 0;
        while ((*p++ = *s2++) && ++i < len)
            ;
        *p = '\0';
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strcpy(char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL) {
        return NULL;
    }
    if (s2 == NULL) {
        *s1 = 0;
    }
    else {
        char* p = s1;
        while ((*p++ = *s2++))
            ;
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strncpy(char* s1, const char* s2, const int len)
{
    if (s1 == NULL) {
        return NULL;
    }
    if (s2 == NULL) {
    }
    else {
        int m = tj_strlen(s1);
        int j = 0;
        char* p = s1;
        for (j; j < len; j++)
        {
            if (*s2 == '\0')
                break;
            *p++ = *s2++;
        }
        if (j > m)
            *p = '\0';
    }
    return s1;
}


/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL)
        return -1;
    if (s2 == NULL)
        return 1;
    while (*s1 && *s1 == *s2) {
        ++s1;
        ++s2;
    }
    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL)
        return -1;
    if (s2 == NULL)
        return 1;
    char* p1 = new char, * q1 = new char;
    tj_strcpy(p1, s1);
    tj_strcpy(q1, s2);
    char* p = p1, * q = q1;;
    while (*p) {
        if (*p >= 'A' && *p <= 'Z') *p += ('a' - 'A');
        ++p;
    }
    while (*q) {
        if (*q >= 'A' && *q <= 'Z') *q += ('a' - 'A');
        ++q;
    }
    return tj_strcmp(p1, q1);

}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL)
        return -1;
    if (s2 == NULL)
        return 1;
    int i = 0;
    while (i < len && *s1 && *s1 == *s2) {
        ++s1;
        ++s2;
        ++i;
    }
    if (i == len) return 0;
    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL)
        return -1;
    if (s2 == NULL)
        return 1;
    int i = 0;
    char* p1 = new char, * q1 = new char;
    tj_strcpy(p1, s1);
    tj_strcpy(q1, s2);
    char* p = p1, * q = q1;
    while (*p) {
        if (*p >= 'A' && *p <= 'Z') *p += ('a' - 'A');
        ++p;
    }
    while (*q) {
        if (*q >= 'A' && *q <= 'Z') *q += ('a' - 'A');
        ++q;
    }

    while (i < len && *p1 && *p1 == *q1) {
        ++p1;
        ++q1;
        ++i;
    }
    if (i == len) return 0;
    return *p1 - *q1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strupr(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        str = NULL;
    else {
        char* p = str;
        while (*p) {
            if (*p >= 'a' && *p <= 'z') *p -= ('a' - 'A');
            ++p;
        }
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strlwr(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        str = NULL;
    else {
        char* p = str;
        while (*p) {
            if (*p >= 'A' && *p <= 'Z') *p += ('a' - 'A');
            ++p;
        }
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char* str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        return 0;
    const char* p = str;
    while (*p && *p != ch) ++p;
    return *p == ch ? (p - str) + 1 : 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char* str, const char* substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if(str == NULL || substr == NULL)
        return 0;
    const char* p = str;
    while (*p) {
        const char* q = substr;
        const char* r = p;
        while (*r && *q && *r == *q) {
            ++r;
            ++q;
        }
        if (!*q) return p - str + 1;
        ++p;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char* str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if(str == NULL)
        return 0;
    const char* p = str + tj_strlen(str);
    while (p >= str && *p != ch) --p;
    return p >= str ? (p - str) + 1 : 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char* str, const char* substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL || substr == NULL)
        return 0;
    int len = tj_strlen(str);
    int sublen = tj_strlen(substr);
    for (int i = len - sublen; i >= 0; --i) {
        if (tj_strncmp(str + i, substr, sublen) == 0) {
            return i + 1;
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strrev(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        str = NULL;
    else {
        int len = tj_strlen(str);
        char* p = str;
        char* q = str + len - 1;
        while (p < q) {
            char tmp = *p;
            *p++ = *q;
            *q-- = tmp;
        }
    }
    return str;
}
